-- VHDL Entity echo_lib.pixel_color_generator.interface
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-109.ad.liu.se)
--          at - 15:02:21 10/13/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
LIBRARY echo_lib;
USE echo_lib.color_t.ALL;

ENTITY pixel_color_generator IS
   PORT( 
      balance          : IN     unsigned (7 DOWNTO 0);
      c0               : IN     std_logic;
      echo_duration    : IN     unsigned (7 DOWNTO 0);
      echo_intensity   : IN     unsigned (7 DOWNTO 0);
      fpga_reset_n     : IN     std_logic;
      h_count          : IN     unsigned (10 DOWNTO 0);
      left_ear_volume  : IN     unsigned (7 DOWNTO 0);
      master_volume    : IN     unsigned (7 DOWNTO 0);
      right_ear_volume : IN     unsigned (7 DOWNTO 0);
      v_count          : IN     unsigned (9 DOWNTO 0);
      prev_pixel_color : OUT    rgb_color_t
   );

-- Declarations

END pixel_color_generator ;

--
-- VHDL Architecture echo_lib.pixel_color_generator.struct
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-109.ad.liu.se)
--          at - 14:47:47 10/13/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE IEEE.MATH_REAL.ALL;

LIBRARY echo_lib;

ARCHITECTURE struct OF pixel_color_generator IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL anular_display_color : rgb_color_t;
   SIGNAL dout1                : std_logic_vector(5 DOWNTO 0);
   SIGNAL hbar_color           : rgb_color_t;
   SIGNAL hbar_color1          : rgb_color_t;
   SIGNAL hbar_color2          : rgb_color_t;
   SIGNAL mask_f               : std_logic;
   SIGNAL mask_f1              : std_logic;
   SIGNAL mask_f2              : std_logic;
   SIGNAL mask_f3              : std_logic;
   SIGNAL mask_f4              : std_logic;
   SIGNAL mask_f5              : std_logic;
   SIGNAL vga_color            : rgb_color_t;
   SIGNAL vga_color1           : rgb_color_t;


   -- Component Declarations
   COMPONENT AnularDisplayGenerator
   GENERIC (
      minor_radius    : integer := 44;
      major_radius    : integer := 84;
      angle_amplitude : integer := 270;
      center_angle    : integer := 90;
      center_x        : integer := 195;
      center_y        : integer := 197
   );
   PORT (
      angle                : IN     unsigned (7 DOWNTO 0);
      c0                   : IN     std_logic ;
      h_count              : IN     unsigned (10 DOWNTO 0);
      v_count              : IN     unsigned (9 DOWNTO 0);
      anular_display_color : OUT    rgb_color_t ;
      mask_f               : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT HorizontalBarDisplayGenerator
   GENERIC (
      position_x   : integer := 25;
      position_y   : integer := 386;
      width        : integer := 340;
      height       : integer := 48;
      wiper_width  : integer := 24;
      wiper_height : integer := 96
   );
   PORT (
      h_count        : IN     unsigned (10 DOWNTO 0);
      v_count        : IN     unsigned (9 DOWNTO 0);
      wiper_position : IN     unsigned (7 DOWNTO 0);
      hbar_color     : OUT    rgb_color_t ;
      mask_f         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT one_hot_mux
   PORT (
      in0       : IN     rgb_color_t;
      in1       : IN     rgb_color_t;
      in2       : IN     rgb_color_t;
      in3       : IN     rgb_color_t;
      in4       : IN     rgb_color_t;
      in5       : IN     rgb_color_t;
      sel       : IN     std_logic_vector (5 DOWNTO 0);
      out_color : OUT    rgb_color_t
   );
   END COMPONENT;
   COMPONENT vertical_bar_display_generator
   GENERIC (
      position_x          : POSITIVE := 30;
      position_y          : POSITIVE := 280;
      width               : POSITIVE := 48;
      number_of_segments  : POSITIVE := 16;
      segment_height_log2 : POSITIVE := 3;
      segment_thickness   : POSITIVE := 4
   );
   PORT (
      active_segments : IN     UNSIGNED (INTEGER(CEIL(LOG2(REAL(number_of_segments + 1))))-1 DOWNTO 0);
      h_count         : IN     unsigned (10 DOWNTO 0);
      v_count         : IN     unsigned ( 9 DOWNTO 0);
      mask_f          : OUT    std_logic;
      vga_color       : OUT    rgb_color_t
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AnularDisplayGenerator USE ENTITY echo_lib.AnularDisplayGenerator;
   FOR ALL : HorizontalBarDisplayGenerator USE ENTITY echo_lib.HorizontalBarDisplayGenerator;
   FOR ALL : one_hot_mux USE ENTITY echo_lib.one_hot_mux;
   FOR ALL : vertical_bar_display_generator USE ENTITY echo_lib.vertical_bar_display_generator;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_7' of 'merge'
   dout1 <= mask_f5 & mask_f4 & mask_f3 & mask_f2 & mask_f1 & mask_f;

   -- Instance port mappings.
   U_0 : AnularDisplayGenerator
      PORT MAP (
         angle                => balance,
         c0                   => c0,
         h_count              => h_count,
         v_count              => v_count,
         anular_display_color => anular_display_color,
         mask_f               => mask_f2
      );
   U_1 : HorizontalBarDisplayGenerator
      GENERIC MAP (
         position_x   => 25,
         position_y   => 386,
         width        => 340,
         height       => 48,
         wiper_width  => 24,
         wiper_height => 96
      )
      PORT MAP (
         h_count        => h_count,
         v_count        => v_count,
         wiper_position => master_volume,
         hbar_color     => hbar_color,
         mask_f         => mask_f3
      );
   U_2 : HorizontalBarDisplayGenerator
      GENERIC MAP (
         position_x   => 100,
         position_y   => 600,
         width        => 824,
         height       => 48,
         wiper_width  => 24,
         wiper_height => 96
      )
      PORT MAP (
         h_count        => h_count,
         v_count        => v_count,
         wiper_position => echo_duration,
         hbar_color     => hbar_color1,
         mask_f         => mask_f4
      );
   U_3 : HorizontalBarDisplayGenerator
      GENERIC MAP (
         position_x   => 100,
         position_y   => 700,
         width        => 824,
         height       => 48,
         wiper_width  => 24,
         wiper_height => 96
      )
      PORT MAP (
         h_count        => h_count,
         v_count        => v_count,
         wiper_position => echo_intensity,
         hbar_color     => hbar_color2,
         mask_f         => mask_f5
      );
   U_4 : one_hot_mux
      PORT MAP (
         sel       => dout1,
         in0       => vga_color,
         in1       => vga_color1,
         in2       => anular_display_color,
         in3       => hbar_color,
         in4       => hbar_color1,
         in5       => hbar_color2,
         out_color => prev_pixel_color
      );
   left_ear_volume_bar : vertical_bar_display_generator
      GENERIC MAP (
         position_x          => 30,
         position_y          => 280,
         width               => 48,
         number_of_segments  => 16,
         segment_height_log2 => 3,
         segment_thickness   => 4
      )
      PORT MAP (
         h_count         => h_count,
         v_count         => v_count,
         active_segments => left_ear_volume(7 DOWNTO 3),
         vga_color       => vga_color,
         mask_f          => mask_f
      );
   right_ear_volume_bar : vertical_bar_display_generator
      GENERIC MAP (
         position_x          => 320,
         position_y          => 280,
         width               => 48,
         number_of_segments  => 16,
         segment_height_log2 => 3,
         segment_thickness   => 4
      )
      PORT MAP (
         h_count         => h_count,
         v_count         => v_count,
         active_segments => right_ear_volume(7 DOWNTO 3),
         vga_color       => vga_color1,
         mask_f          => mask_f1
      );

END struct;
