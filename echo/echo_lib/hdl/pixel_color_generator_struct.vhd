-- VHDL Entity echo_lib.pixel_color_generator.interface
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-109.ad.liu.se)
--          at - 17:43:32 10/10/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY pixel_color_generator IS
   PORT( 
      balance          : IN     unsigned (7 DOWNTO 0);
      c0               : IN     std_logic;
      echo_duration    : IN     unsigned (7 DOWNTO 0);
      echo_intensity   : IN     unsigned (7 DOWNTO 0);
      fpga_reset_n     : IN     std_logic;
      h_count          : IN     unsigned (10 DOWNTO 0);
      left_ear_volume  : IN     unsigned (7 DOWNTO 0);
      master_volume    : IN     unsigned (7 DOWNTO 0);
      right_ear_volume : IN     unsigned (7 DOWNTO 0);
      v_count          : IN     unsigned (9 DOWNTO 0);
      vga_b            : OUT    std_logic_vector (7 DOWNTO 0);
      vga_g            : OUT    std_logic_vector (7 DOWNTO 0);
      vga_r            : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END pixel_color_generator ;

--
-- VHDL Architecture echo_lib.pixel_color_generator.struct
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-112.ad.liu.se)
--          at - 19:18:07 10/10/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE IEEE.MATH_REAL.ALL;

LIBRARY echo_lib;

ARCHITECTURE struct OF pixel_color_generator IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL b_out   : std_logic_vector(7 DOWNTO 0);
   SIGNAL b_out1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL b_out2  : std_logic_vector(7 DOWNTO 0);
   SIGNAL b_out3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL b_out4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL c1      : std_logic;
   SIGNAL dout    : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout1   : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout2   : std_logic_vector(7 DOWNTO 0);
   SIGNAL g_out   : std_logic_vector(7 DOWNTO 0);
   SIGNAL g_out1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL g_out2  : std_logic_vector(7 DOWNTO 0);
   SIGNAL g_out3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL g_out4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL mask_f  : std_logic;
   SIGNAL mask_f1 : std_logic;
   SIGNAL mask_f2 : std_logic;
   SIGNAL mask_f3 : std_logic;
   SIGNAL mask_f4 : std_logic;
   SIGNAL mask_f5 : std_logic;
   SIGNAL r_out   : std_logic_vector(7 DOWNTO 0);
   SIGNAL r_out1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL r_out2  : std_logic_vector(7 DOWNTO 0);
   SIGNAL r_out3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL r_out4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_b1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_b2  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_b3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_b4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_b5  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_b6  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_g1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_g2  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_g3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_g4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_g5  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_g6  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_r1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_r2  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_r3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_r4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_r5  : std_logic_vector(7 DOWNTO 0);
   SIGNAL vga_r6  : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT AnularDisplayGenerator
   GENERIC (
      minor_radius    : integer := 44;
      major_radius    : integer := 84;
      angle_amplitude : integer := 270;
      center_angle    : integer := 90;
      center_x        : integer := 195;
      center_y        : integer := 197
   );
   PORT (
      angle   : IN     unsigned (7 DOWNTO 0);
      c0      : IN     std_logic ;
      h_count : IN     unsigned (10 DOWNTO 0);
      v_count : IN     unsigned (9 DOWNTO 0);
      mask_f  : OUT    std_logic ;
      vga_b   : OUT    std_logic_vector (7 DOWNTO 0);
      vga_g   : OUT    std_logic_vector (7 DOWNTO 0);
      vga_r   : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT HorizontalBarDisplayGenerator
   GENERIC (
      position_x   : integer := 25;
      position_y   : integer := 432;
      width        : integer := 340;
      height       : integer := 48;
      wiper_width  : integer := 12;
      wiper_heigth : integer := 96
   );
   PORT (
      h_count        : IN     unsigned (10 DOWNTO 0);
      v_count        : IN     unsigned (9 DOWNTO 0);
      wiper_position : IN     unsigned (7 DOWNTO 0);
      mask_f         : OUT    std_logic ;
      vga_b          : OUT    std_logic_vector (7 DOWNTO 0);
      vga_g          : OUT    std_logic_vector (7 DOWNTO 0);
      vga_r          : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT color_mixer
   PORT (
      b_in_0 : IN     std_logic_vector (7 DOWNTO 0);
      b_in_1 : IN     std_logic_vector (7 DOWNTO 0);
      g_in_0 : IN     std_logic_vector (7 DOWNTO 0);
      g_in_1 : IN     std_logic_vector (7 DOWNTO 0);
      r_in_0 : IN     std_logic_vector (7 DOWNTO 0);
      r_in_1 : IN     std_logic_vector (7 DOWNTO 0);
      sel    : IN     std_logic ;
      b_out  : OUT    std_logic_vector (7 DOWNTO 0);
      g_out  : OUT    std_logic_vector (7 DOWNTO 0);
      r_out  : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT freq_div
   PORT (
      c0           : IN     std_logic ;
      fpga_reset_n : IN     std_logic ;
      c1           : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT vertical_bar_display_generator
   GENERIC (
      position_x          : POSITIVE := 30;
      position_y          : POSITIVE := 280;
      width               : POSITIVE := 48;
      number_of_segments  : POSITIVE := 16;
      segment_height_log2 : POSITIVE := 3;
      segment_thickness   : POSITIVE := 4
   );
   PORT (
      active_segments : IN     UNSIGNED (INTEGER(CEIL(LOG2(REAL(number_of_segments + 1))))-1 DOWNTO 0);
      h_count         : IN     unsigned (10 DOWNTO 0);
      v_count         : IN     unsigned ( 9 DOWNTO 0);
      mask_f          : OUT    std_logic;
      vga_b           : OUT    std_logic_vector (7 DOWNTO 0);
      vga_g           : OUT    std_logic_vector (7 DOWNTO 0);
      vga_r           : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AnularDisplayGenerator USE ENTITY echo_lib.AnularDisplayGenerator;
   FOR ALL : HorizontalBarDisplayGenerator USE ENTITY echo_lib.HorizontalBarDisplayGenerator;
   FOR ALL : color_mixer USE ENTITY echo_lib.color_mixer;
   FOR ALL : freq_div USE ENTITY echo_lib.freq_div;
   FOR ALL : vertical_bar_display_generator USE ENTITY echo_lib.vertical_bar_display_generator;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'b_bg' of 'constval'
   dout2 <= "11001001";

   -- ModuleWare code(v1.12) for instance 'g_bg' of 'constval'
   dout1 <= "01101100";

   -- ModuleWare code(v1.12) for instance 'r_bg' of 'constval'
   dout <= "01010101";

   -- Instance port mappings.
   balance_indicator : AnularDisplayGenerator
      GENERIC MAP (
         minor_radius    => 44,
         major_radius    => 84,
         angle_amplitude => 270,
         center_angle    => 90,
         center_x        => 195,
         center_y        => 197
      )
      PORT MAP (
         angle   => balance,
         c0      => c1,
         h_count => h_count,
         v_count => v_count,
         mask_f  => mask_f2,
         vga_b   => vga_b3,
         vga_g   => vga_g3,
         vga_r   => vga_r3
      );
   echo_intensity_indicator : HorizontalBarDisplayGenerator
      GENERIC MAP (
         position_x   => 102,
         position_y   => 576,
         width        => 820,
         height       => 48,
         wiper_width  => 12,
         wiper_heigth => 96
      )
      PORT MAP (
         h_count        => h_count,
         v_count        => v_count,
         wiper_position => echo_intensity,
         mask_f         => mask_f4,
         vga_b          => vga_b5,
         vga_g          => vga_g5,
         vga_r          => vga_r5
      );
   echo_volume_indicator : HorizontalBarDisplayGenerator
      GENERIC MAP (
         position_x   => 102,
         position_y   => 676,
         width        => 820,
         height       => 48,
         wiper_width  => 12,
         wiper_heigth => 96
      )
      PORT MAP (
         h_count        => h_count,
         v_count        => v_count,
         wiper_position => echo_duration,
         mask_f         => mask_f5,
         vga_b          => vga_b6,
         vga_g          => vga_g6,
         vga_r          => vga_r6
      );
   master_volume_indicator : HorizontalBarDisplayGenerator
      GENERIC MAP (
         position_x   => 25,
         position_y   => 432,
         width        => 340,
         height       => 48,
         wiper_width  => 12,
         wiper_heigth => 96
      )
      PORT MAP (
         h_count        => h_count,
         v_count        => v_count,
         wiper_position => master_volume,
         mask_f         => mask_f3,
         vga_b          => vga_b4,
         vga_g          => vga_g4,
         vga_r          => vga_r4
      );
   U_0 : color_mixer
      PORT MAP (
         b_in_0 => dout2,
         b_in_1 => vga_b1,
         g_in_0 => dout1,
         g_in_1 => vga_g1,
         r_in_0 => dout,
         r_in_1 => vga_r1,
         sel    => mask_f,
         b_out  => b_out,
         g_out  => g_out,
         r_out  => r_out
      );
   U_1 : color_mixer
      PORT MAP (
         b_in_0 => b_out,
         b_in_1 => vga_b2,
         g_in_0 => g_out,
         g_in_1 => vga_g2,
         r_in_0 => r_out,
         r_in_1 => vga_r2,
         sel    => mask_f1,
         b_out  => b_out1,
         g_out  => g_out1,
         r_out  => r_out1
      );
   U_2 : color_mixer
      PORT MAP (
         b_in_0 => b_out1,
         b_in_1 => vga_b3,
         g_in_0 => g_out1,
         g_in_1 => vga_g3,
         r_in_0 => r_out1,
         r_in_1 => vga_r3,
         sel    => mask_f2,
         b_out  => b_out2,
         g_out  => g_out2,
         r_out  => r_out2
      );
   U_3 : color_mixer
      PORT MAP (
         b_in_0 => b_out2,
         b_in_1 => vga_b4,
         g_in_0 => g_out2,
         g_in_1 => vga_g4,
         r_in_0 => r_out2,
         r_in_1 => vga_r4,
         sel    => mask_f3,
         b_out  => b_out3,
         g_out  => g_out3,
         r_out  => r_out3
      );
   U_4 : color_mixer
      PORT MAP (
         b_in_0 => b_out3,
         b_in_1 => vga_b5,
         g_in_0 => g_out3,
         g_in_1 => vga_g5,
         r_in_0 => r_out3,
         r_in_1 => vga_r5,
         sel    => mask_f4,
         b_out  => b_out4,
         g_out  => g_out4,
         r_out  => r_out4
      );
   U_5 : color_mixer
      PORT MAP (
         b_in_0 => b_out4,
         b_in_1 => vga_b6,
         g_in_0 => g_out4,
         g_in_1 => vga_g6,
         r_in_0 => r_out4,
         r_in_1 => vga_r6,
         sel    => mask_f5,
         b_out  => vga_b,
         g_out  => vga_g,
         r_out  => vga_r
      );
   U_6 : freq_div
      PORT MAP (
         c0           => c0,
         fpga_reset_n => fpga_reset_n,
         c1           => c1
      );
   left_ear_volume_bar : vertical_bar_display_generator
      GENERIC MAP (
         position_x          => 30,
         position_y          => 280,
         width               => 48,
         number_of_segments  => 16,
         segment_height_log2 => 3,
         segment_thickness   => 4
      )
      PORT MAP (
         h_count         => h_count,
         v_count         => v_count,
         active_segments => left_ear_volume(6 DOWNTO 2),
         vga_r           => vga_r1,
         vga_g           => vga_g1,
         vga_b           => vga_b1,
         mask_f          => mask_f
      );
   rigth_ear_volume_bar : vertical_bar_display_generator
      GENERIC MAP (
         position_x          => 338,
         position_y          => 280,
         width               => 48,
         number_of_segments  => 16,
         segment_height_log2 => 3,
         segment_thickness   => 4
      )
      PORT MAP (
         h_count         => h_count,
         v_count         => v_count,
         active_segments => right_ear_volume(6 DOWNTO 2),
         vga_r           => vga_r2,
         vga_g           => vga_g2,
         vga_b           => vga_b2,
         mask_f          => mask_f1
      );

END struct;
