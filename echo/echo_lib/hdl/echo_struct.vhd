-- VHDL Entity echo_lib.echo.interface
--
-- Created:
--          by - antmo328.student-liu.se (muxen2-112.ad.liu.se)
--          at - 21:59:48 10/08/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY echo IS
   GENERIC( 
      G_ADDR_WIDTH    : natural := 20;         --2^20 x 16 = 2 MB
      G_DATA_WIDTH    : natural := 16;         --Audio 16-bit
      G_FS_HZ         : natural := 44100;      --samplerate
      G_GAIN_INIT_Q15 : natural := 9830;       --~0.30 (0.30 * 32768)
      G_GAIN_STEP_Q15 : natural := 512;        --~0.015625 per keyboard use
      G_DELAY_INIT_MS : natural := 1000;       --1.00 s Start
      G_DELAY_STEP_MS : natural := 100         --100 ms per keyboard use
   );
   PORT( 
      KB_SCAN_CODE    : IN     std_logic_vector (7 DOWNTO 0);
      KB_SCAN_VALID   : IN     std_logic;
      RESET_N         : IN     std_logic;
      audio_in_L      : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_in_R      : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_in_valid  : IN     std_logic;
      clk             : IN     std_logic;
      SRAM_ADDR       : OUT    std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0);
      SRAM_CE_N       : OUT    std_logic;
      SRAM_DQ         : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      SRAM_LB_N       : OUT    std_logic;
      SRAM_OE_N       : OUT    std_logic;
      SRAM_UB_N       : OUT    std_logic;
      SRAM_WE_N       : OUT    std_logic;
      audio_in_ready  : OUT    std_logic;
      audio_out_L     : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_out_R     : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_out_valid : OUT    std_logic;
      mon_delay_smpl  : OUT    std_logic_vector (G_ADDR_WIDTH-2 DOWNTO 0);
      mon_gain_q15    : OUT    std_logic_vector (15 DOWNTO 0)
   );

-- Declarations

END echo ;

--
-- VHDL Architecture echo_lib.echo.struct
--
-- Created:
--          by - antmo328.student-liu.se (muxen2-112.ad.liu.se)
--          at - 21:59:48 10/08/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY echo_lib;

ARCHITECTURE struct OF echo IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL delay_samples  : unsigned(G_ADDR_WIDTH-2 DOWNTO 0);
   SIGNAL g_feedback_q15 : std_logic_vector(15 DOWNTO 0);
   SIGNAL rd_addr        : std_logic_vector(G_ADDR_WIDTH-1 DOWNTO 0);
   SIGNAL rd_data        : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL rd_en          : std_logic;
   SIGNAL rd_valid       : std_logic;
   SIGNAL wr_addr        : std_logic_vector(G_ADDR_WIDTH-1 DOWNTO 0);
   SIGNAL wr_data        : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL wr_en          : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL SRAM_DQ_internal : std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);


   -- Component Declarations
   COMPONENT echo_logic
   GENERIC (
      G_ADDR_WIDTH : natural;      -- Wortadressbreite
      G_DATA_WIDTH : natural       -- Audio: 16 Bit
   );
   PORT (
      RESET_N         : IN     std_logic;
      audio_in_L      : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_in_R      : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_in_valid  : IN     std_logic;
      clk             : IN     std_logic;
      delay_samples   : IN     unsigned (G_ADDR_WIDTH-2 DOWNTO 0);
      g_feedback_q15  : IN     std_logic_vector (15 DOWNTO 0);
      rd_data         : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      rd_valid        : IN     std_logic;
      audio_in_ready  : OUT    std_logic;
      audio_out_L     : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_out_R     : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_out_valid : OUT    std_logic;
      rd_addr         : OUT    std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0);
      rd_en           : OUT    std_logic;
      wr_addr         : OUT    std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0);
      wr_data         : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      wr_en           : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT sram_ctrl
   GENERIC (
      G_ADDR_WIDTH : natural := 20;
      G_DATA_WIDTH : natural := 16
   );
   PORT (
      rd_data   : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      rd_valid  : OUT    std_logic ;
      SRAM_ADDR : OUT    std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0);
      SRAM_DQ   : INOUT  std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      SRAM_CE_N : OUT    std_logic ;
      SRAM_OE_N : OUT    std_logic ;
      SRAM_WE_N : OUT    std_logic ;
      SRAM_UB_N : OUT    std_logic ;
      SRAM_LB_N : OUT    std_logic ;
      rd_addr   : IN     std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0);
      rd_en     : IN     std_logic ;
      wr_en     : IN     std_logic ;
      clk       : IN     std_logic ;
      RESET_N   : IN     std_logic ;
      wr_data   : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      wr_addr   : IN     std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : echo_logic USE ENTITY echo_lib.echo_logic;
   FOR ALL : sram_ctrl USE ENTITY echo_lib.sram_ctrl;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : echo_logic
      GENERIC MAP (
         G_ADDR_WIDTH => 20,         -- Wortadressbreite
         G_DATA_WIDTH => 16          -- Audio: 16 Bit
      )
      PORT MAP (
         audio_out_L     => audio_out_L,
         audio_out_R     => audio_out_R,
         delay_samples   => delay_samples,
         g_feedback_q15  => g_feedback_q15,
         wr_en           => wr_en,
         wr_addr         => wr_addr,
         wr_data         => wr_data,
         rd_en           => rd_en,
         rd_addr         => rd_addr,
         RESET_N         => RESET_N,
         audio_in_ready  => audio_in_ready,
         audio_out_valid => audio_out_valid,
         rd_valid        => rd_valid,
         rd_data         => rd_data,
         audio_in_L      => audio_in_L,
         audio_in_R      => audio_in_R,
         audio_in_valid  => audio_in_valid,
         clk             => clk
      );
   U_1 : sram_ctrl
      GENERIC MAP (
         G_ADDR_WIDTH => 20,
         G_DATA_WIDTH => 16
      )
      PORT MAP (
         rd_data   => rd_data,
         rd_valid  => rd_valid,
         SRAM_ADDR => SRAM_ADDR,
         SRAM_DQ   => SRAM_DQ_internal,
         SRAM_CE_N => SRAM_CE_N,
         SRAM_OE_N => SRAM_OE_N,
         SRAM_WE_N => SRAM_WE_N,
         SRAM_UB_N => SRAM_UB_N,
         SRAM_LB_N => SRAM_LB_N,
         rd_addr   => rd_addr,
         rd_en     => rd_en,
         wr_en     => wr_en,
         clk       => clk,
         RESET_N   => RESET_N,
         wr_data   => wr_data,
         wr_addr   => wr_addr
      );

   -- Implicit buffered output assignments
   SRAM_DQ <= SRAM_DQ_internal;

END struct;
