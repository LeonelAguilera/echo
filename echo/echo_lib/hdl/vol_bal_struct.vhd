-- VHDL Entity echo_lib.Vol_BAl.symbol
--
-- Created:
--          by - alfth698.student-liu.se (muxen2-109.ad.liu.se)
--          at - 19:00:07 10/28/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY Vol_BAl IS
   PORT( 
      Enable       : IN     std_logic;
      Left_Audio   : IN     std_logic_vector (15 DOWNTO 0);
      Reset        : IN     std_logic;
      Right_Audio  : IN     std_logic_vector (15 DOWNTO 0);
      c0           : IN     std_logic;
      lrsel        : IN     std_logic;
      scancode     : IN     std_logic_vector (7 DOWNTO 0);
      Left_Dac     : OUT    std_logic_vector (15 DOWNTO 0);
      Right_Dac    : OUT    std_logic_vector (15 DOWNTO 0);
      signal_ready : OUT    std_logic
   );

-- Declarations

END Vol_BAl ;

--
-- VHDL Architecture echo_lib.Vol_BAl.struct
--
-- Created:
--          by - alfth698.student-liu.se (muxen2-109.ad.liu.se)
--          at - 19:00:07 10/28/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
LIBRARY echo_lib;
USE echo_lib.keyboard_package.ALL;


ARCHITECTURE struct OF Vol_BAl IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL APressed     : std_logic;
   SIGNAL DAC          : signed(15 DOWNTO 0);
   SIGNAL DAC_en       : std_logic;
   SIGNAL DPressed     : std_logic;
   SIGNAL SPressed     : std_logic;
   SIGNAL TXReg        : signed(15 DOWNTO 0);
   SIGNAL Vector_Value : std_logic_vector(5 DOWNTO 0);
   SIGNAL WPressed     : std_logic;
   SIGNAL bal_count    : unsigned(3 DOWNTO 0);
   SIGNAL overflow     : std_logic;
   SIGNAL vol_count    : unsigned(3 DOWNTO 0);


   -- Component Declarations
   COMPONENT Key_Data
   PORT (
      Vector_Value : IN     std_logic_vector (5 DOWNTO 0);
      WPressed     : OUT    std_logic ;
      SPressed     : OUT    std_logic ;
      DPressed     : OUT    std_logic ;
      APressed     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L_or_R
   PORT (
      DAC       : IN     signed (15 DOWNTO 0);
      lrsel     : IN     std_logic ;
      c0        : IN     std_logic ;
      Left_Dac  : OUT    std_logic_vector (15 DOWNTO 0);
      Right_Dac : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Left_Right
   PORT (
      c0          : IN     std_logic ;
      Reset       : IN     std_logic ;
      Left_Audio  : IN     std_logic_vector (15 DOWNTO 0);
      Right_Audio : IN     std_logic_vector (15 DOWNTO 0);
      lrsel       : IN     std_logic ;
      Enable      : IN     std_logic ;
      DAC_en      : OUT    std_logic ;
      TXReg       : OUT    signed (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Settings
   PORT (
      DPressed  : IN     std_logic ;
      WPressed  : IN     std_logic ;
      SPressed  : IN     std_logic ;
      vol_count : OUT    unsigned (3 DOWNTO 0);
      bal_count : OUT    unsigned (3 DOWNTO 0);
      APressed  : IN     std_logic ;
      Reset     : IN     std_logic ;
      c0        : IN     std_logic ;
      overflow  : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT V_B
   PORT (
      lrsel        : IN     std_logic ;
      TXReg        : IN     signed (15 DOWNTO 0);
      DAC_en       : IN     std_logic ;
      DAC          : OUT    signed (15 DOWNTO 0);
      overflow     : OUT    std_logic ;
      signal_ready : OUT    std_logic ;
      Reset        : IN     std_logic ;
      bal_count    : IN     unsigned (3 DOWNTO 0);
      vol_count    : IN     unsigned (3 DOWNTO 0);
      c0           : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT gen_kb_dec
   GENERIC (
      N       : integer := 18;               -- Number of functions
      key_map : key_array(N-1 downto 0)      -- Key map provided by user
   );
   PORT (
      clk           : IN     std_logic;
      scancode      : IN     std_logic_vector (7 DOWNTO 0);
      invalid_led   : OUT    std_logic;
      output_signal : OUT    std_logic_vector (N-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Key_Data USE ENTITY echo_lib.Key_Data;
   FOR ALL : L_or_R USE ENTITY echo_lib.L_or_R;
   FOR ALL : Left_Right USE ENTITY echo_lib.Left_Right;
   FOR ALL : Settings USE ENTITY echo_lib.Settings;
   FOR ALL : V_B USE ENTITY echo_lib.V_B;
   FOR ALL : gen_kb_dec USE ENTITY echo_lib.gen_kb_dec;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_3 : Key_Data
      PORT MAP (
         Vector_Value => Vector_Value,
         WPressed     => WPressed,
         SPressed     => SPressed,
         DPressed     => DPressed,
         APressed     => APressed
      );
   U_5 : L_or_R
      PORT MAP (
         DAC       => DAC,
         lrsel     => lrsel,
         c0        => c0,
         Left_Dac  => Left_Dac,
         Right_Dac => Right_Dac
      );
   U_1 : Left_Right
      PORT MAP (
         c0          => c0,
         Reset       => Reset,
         Left_Audio  => Left_Audio,
         Right_Audio => Right_Audio,
         lrsel       => lrsel,
         Enable      => Enable,
         DAC_en      => DAC_en,
         TXReg       => TXReg
      );
   U_2 : Settings
      PORT MAP (
         DPressed  => DPressed,
         WPressed  => WPressed,
         SPressed  => SPressed,
         vol_count => vol_count,
         bal_count => bal_count,
         APressed  => APressed,
         Reset     => Reset,
         c0        => c0,
         overflow  => overflow
      );
   U_0 : V_B
      PORT MAP (
         lrsel        => lrsel,
         TXReg        => TXReg,
         DAC_en       => DAC_en,
         DAC          => DAC,
         overflow     => overflow,
         signal_ready => signal_ready,
         Reset        => Reset,
         bal_count    => bal_count,
         vol_count    => vol_count,
         c0           => c0
      );
   U_4 : gen_kb_dec
      GENERIC MAP (
         N       => 6,                                                                               -- Number of functions
         key_map => ("00000000", "10111000", "00111000", "00011011", "00100011", "00000000")         -- Key map provided by user
      )
      PORT MAP (
         clk           => c0,
         scancode      => scancode,
         output_signal => Vector_Value,
         invalid_led   => OPEN
      );

END struct;
