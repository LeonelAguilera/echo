-- VHDL Entity echo_lib.osciloscope_plotter.symbol
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-112.ad.liu.se)
--          at - 11:28:39 10/20/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE IEEE.MATH_REAL.ALL;
LIBRARY echo_lib;
USE echo_lib.color_t.ALL;

ENTITY osciloscope_plotter IS
   GENERIC( 
      position_x      : integer := 350;
      position_y      : integer := 549;
      n_h_blocks      : integer := 10;
      n_v_blocks      : integer := 8;
      log2_block_size : integer := 6;
      line_thickness  : integer := 6
   );
   PORT( 
      c0                 : IN     std_logic;
      fpga_reset_n       : IN     std_logic;
      h_count            : IN     unsigned (10 DOWNTO 0);
      load_new           : IN     std_logic;
      new_x_coordinate   : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      new_y_coordinate   : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      v_count            : IN     unsigned (9 DOWNTO 0);
      mask_f             : OUT    std_logic;
      oscilloscope_color : OUT    rgb_color_t
   );

-- Declarations

END osciloscope_plotter ;

--
-- VHDL Architecture echo_lib.osciloscope_plotter.struct
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-112.ad.liu.se)
--          at - 12:11:35 10/20/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE IEEE.MATH_REAL.ALL;
LIBRARY echo_lib;
USE echo_lib.color_t.ALL;


ARCHITECTURE struct OF osciloscope_plotter IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addr0              : std_logic_vector(18 DOWNTO 0);
   SIGNAL addr1              : std_logic_vector(18 DOWNTO 0);
   SIGNAL bg_image           : rgb_color_t;
   SIGNAL buffer_ready       : std_logic;
   SIGNAL buffer_selector    : std_logic;
   SIGNAL color_data         : std_logic_vector(1 DOWNTO 0);
   SIGNAL color_data_0       : std_logic_vector(1 DOWNTO 0);
   SIGNAL color_data_1       : std_logic_vector(1 DOWNTO 0);
   SIGNAL data_available     : std_logic;
   SIGNAL din0               : std_logic_vector(1 DOWNTO 0);
   SIGNAL din1               : std_logic_vector(1 DOWNTO 0);
   SIGNAL display_color_data : std_logic_vector(1 DOWNTO 0);
   SIGNAL finished_drawing   : std_logic;
   SIGNAL in_image_window    : std_logic;
   SIGNAL next_data          : std_logic;
   SIGNAL q                  : std_logic;
   SIGNAL qb                 : std_logic;
   SIGNAL read_address       : std_logic_vector(18 DOWNTO 0);
   SIGNAL switch_buffer      : std_logic;
   SIGNAL write_address      : std_logic_vector(18 DOWNTO 0);
   SIGNAL x_coordinate       : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coordinate       : std_logic_vector(7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'image_buffer_0' of 'ramsp'
   TYPE MW_IMAGE_BUFFER_0RAM_TYPE IS ARRAY (((2**19) -1) DOWNTO 0) OF std_logic_vector(1 DOWNTO 0);
   SIGNAL mw_image_buffer_0ram_table : MW_IMAGE_BUFFER_0RAM_TYPE := (OTHERS => "00");
   SIGNAL mw_image_buffer_0addr_reg: std_logic_vector(18 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'image_buffer_1' of 'ramsp'
   TYPE MW_IMAGE_BUFFER_1RAM_TYPE IS ARRAY (((2**19) -1) DOWNTO 0) OF std_logic_vector(1 DOWNTO 0);
   SIGNAL mw_image_buffer_1ram_table : MW_IMAGE_BUFFER_1RAM_TYPE := (OTHERS => "00");
   SIGNAL mw_image_buffer_1addr_reg: std_logic_vector(18 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_7' of 'rsff'
   SIGNAL mw_U_7reg_cval : std_logic;

   -- ModuleWare signal declarations(v1.12) for instance 'U_4' of 'tff'
   SIGNAL mw_U_4reg_cval : std_logic;

   -- Component Declarations
   COMPONENT address_calculator
   GENERIC (
      min_x : UNSIGNED(10 DOWNTO 0);
      max_x : UNSIGNED(10 DOWNTO 0);
      min_y : UNSIGNED(9 DOWNTO 0);
      max_y : UNSIGNED(9 DOWNTO 0)
   );
   PORT (
      c0               : IN     std_logic ;
      h_count          : IN     unsigned (10 DOWNTO 0);
      v_count          : IN     unsigned (9 DOWNTO 0);
      finished_drawing : OUT    std_logic ;
      in_image_window  : OUT    std_logic ;
      read_address     : OUT    std_logic_vector (18 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT background_generator
   GENERIC (
      background_color       : rgb_color_t := ("11101110", "10011000", "01111010");
      divisor_line_color     : rgb_color_t := ("01010010", "00011110", "01000110");
      position_x             : INTEGER     := 368;
      position_y             : INTEGER     := 16;
      log2_block_size        : INTEGER     := 6;
      h_block_number         : INTEGER     := 10;
      v_block_number         : INTEGER     := 8;
      divisor_line_thickness : INTEGER     := 2
   );
   PORT (
      h_count  : IN     unsigned (10 DOWNTO 0);
      v_count  : IN     unsigned (9 DOWNTO 0);
      bg_image : OUT    rgb_color_t 
   );
   END COMPONENT;
   COMPONENT color_mapper
   GENERIC (
      background_color : rgb_color_t := ("01111010", "10011000", "11101110");
      oscil_line_color : rgb_color_t := ("11100110", "10001110", "00110101")
   );
   PORT (
      display_color_data : IN     std_logic_vector (1 DOWNTO 0);
      in_image_window    : IN     std_logic ;
      mask_f             : OUT    std_logic ;
      bg_image           : IN     rgb_color_t ;
      oscilloscope_color : OUT    rgb_color_t 
   );
   END COMPONENT;
   COMPONENT coordinate_fifo
   GENERIC (
      fifo_size : INTEGER := 8
   );
   PORT (
      load_new         : IN     std_logic ;
      new_x_coordinate : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      new_y_coordinate : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      next_data        : IN     std_logic ;
      data_available   : OUT    std_logic ;
      x_coordinate     : OUT    std_logic_vector (7 DOWNTO 0);
      y_coordinate     : OUT    std_logic_vector (7 DOWNTO 0);
      c0               : IN     std_logic ;
      fpga_reset_n     : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT overcomplicated_conmutator
   PORT (
      buffer_selector : IN     std_logic ;
      color_data      : IN     std_logic_vector (1 DOWNTO 0);
      read_address    : IN     std_logic_vector (18 DOWNTO 0);
      write_address   : IN     std_logic_vector (18 DOWNTO 0);
      addr0           : OUT    std_logic_vector (18 DOWNTO 0);
      addr1           : OUT    std_logic_vector (18 DOWNTO 0);
      din0            : OUT    std_logic_vector (1 DOWNTO 0);
      din1            : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT waveform_rasterizer
   GENERIC (
      log2_block_size      : INTEGER := 6;
      h_block_number       : INTEGER := 10;
      v_block_number       : INTEGER := 8;
      line_thickness       : INTEGER := 4;
      fixed_point_decimals : INTEGER := 4
   );
   PORT (
      data_available : IN     std_logic ;
      x_coordinate   : IN     std_logic_vector (7 DOWNTO 0);
      y_coordinate   : IN     std_logic_vector (7 DOWNTO 0);
      buffer_ready   : OUT    std_logic ;
      color_data     : OUT    std_logic_vector (1 DOWNTO 0);
      next_data      : OUT    std_logic ;
      write_address  : OUT    std_logic_vector (18 DOWNTO 0);
      c0             : IN     std_logic ;
      fpga_reset_n   : IN     std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : address_calculator USE ENTITY echo_lib.address_calculator;
   FOR ALL : background_generator USE ENTITY echo_lib.background_generator;
   FOR ALL : color_mapper USE ENTITY echo_lib.color_mapper;
   FOR ALL : coordinate_fifo USE ENTITY echo_lib.coordinate_fifo;
   FOR ALL : overcomplicated_conmutator USE ENTITY echo_lib.overcomplicated_conmutator;
   FOR ALL : waveform_rasterizer USE ENTITY echo_lib.waveform_rasterizer;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_23' of 'and'
   switch_buffer <= q AND finished_drawing;

   -- ModuleWare code(v1.12) for instance 'U_3' of 'mux'
   u_3combo_proc: PROCESS(color_data_0, color_data_1, buffer_selector)
   BEGIN
      CASE buffer_selector IS
         WHEN '0' => display_color_data <= color_data_0;
         WHEN '1' => display_color_data <= color_data_1;
         WHEN OTHERS => display_color_data <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_3combo_proc;

   -- ModuleWare code(v1.12) for instance 'image_buffer_0' of 'ramsp'
   --attribute block_ram : boolean;
   --attribute block_ram of mem : signal is false;
   image_buffer_0ram_p_proc: PROCESS (c0)
   BEGIN
      IF (c0'EVENT AND c0='1') THEN
         IF (qb = '1') THEN
            mw_image_buffer_0ram_table(TO_INTEGER(unsigned(addr0))) <= din0;
         END IF;
         mw_image_buffer_0addr_reg <= addr0;
      END IF;
   END PROCESS image_buffer_0ram_p_proc;
   color_data_0 <= mw_image_buffer_0ram_table(TO_INTEGER(unsigned(mw_image_buffer_0addr_reg)));

   -- ModuleWare code(v1.12) for instance 'image_buffer_1' of 'ramsp'
   --attribute block_ram : boolean;
   --attribute block_ram of mem : signal is false;
   image_buffer_1ram_p_proc: PROCESS (c0)
   BEGIN
      IF (c0'EVENT AND c0='1') THEN
         IF (buffer_selector = '1') THEN
            mw_image_buffer_1ram_table(TO_INTEGER(unsigned(addr1))) <= din1;
         END IF;
         mw_image_buffer_1addr_reg <= addr1;
      END IF;
   END PROCESS image_buffer_1ram_p_proc;
   color_data_1 <= mw_image_buffer_1ram_table(TO_INTEGER(unsigned(mw_image_buffer_1addr_reg)));

   -- ModuleWare code(v1.12) for instance 'U_7' of 'rsff'
   u_7seq_proc: PROCESS (c0)
   BEGIN
      IF (c0'EVENT AND c0='1') THEN
         IF (switch_buffer = '1') THEN
            mw_U_7reg_cval <= '0';
         ELSIF (buffer_ready = '1') THEN
            mw_U_7reg_cval <= '1';
         END IF;
      END IF;
   END PROCESS u_7seq_proc;
   q <= mw_U_7reg_cval;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'tff'
   u_4seq_proc: PROCESS (c0)
   BEGIN
      IF (c0'EVENT AND c0='1') THEN
         IF (fpga_reset_n = '1') THEN
            mw_U_4reg_cval <= '0';
         ELSIF (switch_buffer = '1') THEN
            mw_U_4reg_cval <= NOT(mw_U_4reg_cval);
         END IF;
      END IF;
   END PROCESS u_4seq_proc;
   buffer_selector <= mw_U_4reg_cval;
   qb <= NOT(mw_U_4reg_cval);

   -- Instance port mappings.
   U_5 : address_calculator
      GENERIC MAP (
         min_x => TO_UNSIGNED(position_x, 11),
         max_x => TO_UNSIGNED(position_x + (n_h_blocks * (2**log2_block_size)), 11),
         min_y => TO_UNSIGNED(position_y + (n_v_blocks * (2**log2_block_size)), 10),
         max_y => TO_UNSIGNED(position_y, 10)
      )
      PORT MAP (
         c0               => c0,
         h_count          => h_count,
         v_count          => v_count,
         finished_drawing => finished_drawing,
         in_image_window  => in_image_window,
         read_address     => read_address
      );
   U_8 : background_generator
      GENERIC MAP (
         background_color       => ("01111010", "10011000", "11101110"),
         divisor_line_color     => ("01111010", "10011000", "11101110"),
         position_x             => position_x,
         position_y             => position_y,
         log2_block_size        => 6,
         h_block_number         => 10,
         v_block_number         => 8,
         divisor_line_thickness => 2
      )
      PORT MAP (
         h_count  => h_count,
         v_count  => v_count,
         bg_image => bg_image
      );
   U_0 : color_mapper
      GENERIC MAP (
         background_color => ("01111010", "10011000", "11101110"),
         oscil_line_color => ("11100110", "10001110", "00110101")
      )
      PORT MAP (
         display_color_data => display_color_data,
         in_image_window    => in_image_window,
         mask_f             => mask_f,
         bg_image           => bg_image,
         oscilloscope_color => oscilloscope_color
      );
   U_1 : coordinate_fifo
      GENERIC MAP (
         fifo_size => 160
      )
      PORT MAP (
         load_new         => load_new,
         new_x_coordinate => new_x_coordinate,
         new_y_coordinate => new_y_coordinate,
         next_data        => next_data,
         data_available   => data_available,
         x_coordinate     => x_coordinate,
         y_coordinate     => y_coordinate,
         c0               => c0,
         fpga_reset_n     => fpga_reset_n
      );
   U_6 : overcomplicated_conmutator
      PORT MAP (
         buffer_selector => buffer_selector,
         color_data      => color_data,
         read_address    => read_address,
         write_address   => write_address,
         addr0           => addr0,
         addr1           => addr1,
         din0            => din0,
         din1            => din1
      );
   U_2 : waveform_rasterizer
      GENERIC MAP (
         log2_block_size      => 6,
         h_block_number       => 10,
         v_block_number       => 8,
         line_thickness       => 4,
         fixed_point_decimals => 4
      )
      PORT MAP (
         data_available => data_available,
         x_coordinate   => x_coordinate,
         y_coordinate   => y_coordinate,
         buffer_ready   => buffer_ready,
         color_data     => color_data,
         next_data      => next_data,
         write_address  => write_address,
         c0             => c0,
         fpga_reset_n   => fpga_reset_n
      );

END struct;
