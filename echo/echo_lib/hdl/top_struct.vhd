-- VHDL Entity echo_lib.top.symbol
--
-- Created:
--          by - antmo328.student-liu.se (muxen2-112.ad.liu.se)
--          at - 21:53:06 10/08/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY top IS
   GENERIC( 
      G_ADDR_WIDTH : natural := 20;
      G_DATA_WIDTH : natural := 16
   );
-- Declarations

END top ;

--
-- VHDL Architecture echo_lib.top.struct
--
-- Created:
--          by - antmo328.student-liu.se (muxen2-111.ad.liu.se)
--          at - 13:46:11 10/17/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY echo_lib;

ARCHITECTURE struct OF top IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL KB_SCAN_CODE    : std_logic_vector(7 DOWNTO 0);
   SIGNAL KB_SCAN_VALID   : std_logic;
   SIGNAL RESET_N         : std_logic;
   SIGNAL SRAM_ADDR       : std_logic_vector(G_ADDR_WIDTH-1 DOWNTO 0);
   SIGNAL SRAM_CE_N       : std_logic;
   SIGNAL SRAM_DQ         : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL SRAM_LB_N       : std_logic;
   SIGNAL SRAM_OE_N       : std_logic;
   SIGNAL SRAM_UB_N       : std_logic;
   SIGNAL SRAM_WE_N       : std_logic;
   SIGNAL audio_in_L      : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL audio_in_R      : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL audio_in_ready  : std_logic;
   SIGNAL audio_in_valid  : std_logic;
   SIGNAL audio_out_L     : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL audio_out_R     : std_logic_vector(G_DATA_WIDTH-1 DOWNTO 0);
   SIGNAL audio_out_valid : std_logic;
   SIGNAL clk             : std_logic;
   SIGNAL delay_samples   : std_logic_vector(18 DOWNTO 0) := std_logic_vector(to_unsigned(33075, 19));
   SIGNAL g_feedback_q15  : std_logic_vector(15 DOWNTO 0) := x"8000";


   -- Component Declarations
   COMPONENT audio_io
   END COMPONENT;
   COMPONENT echo
   GENERIC (
      G_ADDR_WIDTH    : natural := 20;         --2^20 x 16 = 2 MB
      G_DATA_WIDTH    : natural := 16;         --Audio 16-bit
      G_FS_HZ         : natural := 44100;      --samplerate
      G_GAIN_INIT_Q15 : natural := 9830;       --~0.30 (0.30 * 32768)
      G_GAIN_STEP_Q15 : natural := 512;        --~0.015625 per keyboard use
      G_DELAY_INIT_MS : natural := 1000;       --1.00 s Start
      G_DELAY_STEP_MS : natural := 100         --100 ms per keyboard use
   );
   PORT (
      KB_SCAN_CODE    : IN     std_logic_vector (7 DOWNTO 0);
      KB_SCAN_VALID   : IN     std_logic ;
      RESET_N         : IN     std_logic ;
      audio_in_L      : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_in_R      : IN     std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_in_valid  : IN     std_logic ;
      clk             : IN     std_logic ;
      SRAM_ADDR       : OUT    std_logic_vector (G_ADDR_WIDTH-1 DOWNTO 0);
      SRAM_CE_N       : OUT    std_logic ;
      SRAM_DQ         : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      SRAM_LB_N       : OUT    std_logic ;
      SRAM_OE_N       : OUT    std_logic ;
      SRAM_UB_N       : OUT    std_logic ;
      SRAM_WE_N       : OUT    std_logic ;
      audio_in_ready  : OUT    std_logic ;
      audio_out_L     : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_out_R     : OUT    std_logic_vector (G_DATA_WIDTH-1 DOWNTO 0);
      audio_out_valid : OUT    std_logic ;
      delay_samples   : OUT    std_logic_vector (18 DOWNTO 0);
      g_feedback_q15  : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT i2c
   END COMPONENT;
   COMPONENT kb_decoder
   END COMPONENT;
   COMPONENT vga
   END COMPONENT;
   COMPONENT vol_bal
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : audio_io USE ENTITY echo_lib.audio_io;
   FOR ALL : echo USE ENTITY echo_lib.echo;
   FOR ALL : i2c USE ENTITY echo_lib.i2c;
   FOR ALL : kb_decoder USE ENTITY echo_lib.kb_decoder;
   FOR ALL : vga USE ENTITY echo_lib.vga;
   FOR ALL : vol_bal USE ENTITY echo_lib.vol_bal;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_2 : audio_io;
   U_0 : echo
      PORT MAP (
         KB_SCAN_CODE    => KB_SCAN_CODE,
         KB_SCAN_VALID   => KB_SCAN_VALID,
         RESET_N         => RESET_N,
         audio_in_L      => audio_in_L,
         audio_in_R      => audio_in_R,
         audio_in_valid  => audio_in_valid,
         clk             => clk,
         SRAM_ADDR       => SRAM_ADDR,
         SRAM_CE_N       => SRAM_CE_N,
         SRAM_DQ         => SRAM_DQ,
         SRAM_LB_N       => SRAM_LB_N,
         SRAM_OE_N       => SRAM_OE_N,
         SRAM_UB_N       => SRAM_UB_N,
         SRAM_WE_N       => SRAM_WE_N,
         audio_in_ready  => audio_in_ready,
         audio_out_L     => audio_out_L,
         audio_out_R     => audio_out_R,
         audio_out_valid => audio_out_valid,
         delay_samples   => delay_samples,
         g_feedback_q15  => g_feedback_q15
      );
   U_5 : i2c;
   U_6 : kb_decoder;
   U_3 : vga;
   U_4 : vol_bal;

END struct;
