-- VHDL Entity echo_lib.wiper_generator.interface
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-112.ad.liu.se)
--          at - 22:04:49 10/06/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY wiper_generator IS
   GENERIC( 
      minor_radius    : integer := 44;
      major_radius    : integer := 84;
      angle_amplitude : integer := 270;
      center_angle    : integer := 90;
      center_x        : integer := 195;
      center_y        : integer := 197;
      tap_width       : integer := 24;
      tap_height      : integer := 48
   );
   PORT( 
      angle      : IN     unsigned (7 DOWNTO 0);
      c0         : IN     std_logic;
      h_count    : IN     unsigned (10 DOWNTO 0);
      v_count    : IN     unsigned (9 DOWNTO 0);
      wiper_b    : OUT    std_logic_vector (7 DOWNTO 0);
      wiper_g    : OUT    std_logic_vector (7 DOWNTO 0);
      wiper_mask : OUT    std_logic;
      wiper_r    : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END wiper_generator ;

--
-- VHDL Architecture echo_lib.wiper_generator.struct
--
-- Created:
--          by - leoag319.student-liu.se (muxen2-112.ad.liu.se)
--          at - 22:04:49 10/06/25
--
-- Generated by Siemens HDL Designer(TM) 2024.1 Built on 24 Jan 2024 at 18:06:06
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY echo_lib;

ARCHITECTURE struct OF wiper_generator IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Ax : unsigned(10 DOWNTO 0);
   SIGNAL Ay : unsigned(9 DOWNTO 0);
   SIGNAL Bx : unsigned(10 DOWNTO 0);
   SIGNAL By : unsigned(9 DOWNTO 0);
   SIGNAL Cx : unsigned(10 DOWNTO 0);
   SIGNAL Cy : unsigned(9 DOWNTO 0);
   SIGNAL Dx : unsigned(10 DOWNTO 0);
   SIGNAL Dy : unsigned(9 DOWNTO 0);


   -- Component Declarations
   COMPONENT point_computation
   GENERIC (
      minor_radius    : integer := 44;       -- 
      major_radius    : integer := 84;       -- 
      angle_amplitude : integer := 270;      -- 
      center_angle    : integer := 90;       -- 
      center_x        : integer := 195;      -- 
      center_y        : integer := 197;      -- 
      tap_width       : integer := 24;       -- 
      tap_height      : integer := 48        -- 
   );
   PORT (
      angle   : IN     unsigned (7 DOWNTO 0);
      c0      : IN     std_logic ;
      v_count : IN     unsigned (9 DOWNTO 0);
      Ax      : OUT    unsigned (10 DOWNTO 0);
      Ay      : OUT    unsigned (9 DOWNTO 0);
      Bx      : OUT    unsigned (10 DOWNTO 0);
      By      : OUT    unsigned (9 DOWNTO 0);
      Cx      : OUT    unsigned (10 DOWNTO 0);
      Cy      : OUT    unsigned (9 DOWNTO 0);
      Dx      : OUT    unsigned (10 DOWNTO 0);
      Dy      : OUT    unsigned (9 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT wiper_rasterizer
   PORT (
      Ax         : IN     unsigned (10 DOWNTO 0);
      Ay         : IN     unsigned (9 DOWNTO 0);
      Bx         : IN     unsigned (10 DOWNTO 0);
      By         : IN     unsigned (9 DOWNTO 0);
      Cx         : IN     unsigned (10 DOWNTO 0);
      Cy         : IN     unsigned (9 DOWNTO 0);
      Dx         : IN     unsigned (10 DOWNTO 0);
      Dy         : IN     unsigned (9 DOWNTO 0);
      h_count    : IN     unsigned (10 DOWNTO 0);
      v_count    : IN     unsigned (9 DOWNTO 0);
      wiper_b    : OUT    std_logic_vector (7 DOWNTO 0);
      wiper_g    : OUT    std_logic_vector (7 DOWNTO 0);
      wiper_mask : OUT    std_logic ;
      wiper_r    : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : point_computation USE ENTITY echo_lib.point_computation;
   FOR ALL : wiper_rasterizer USE ENTITY echo_lib.wiper_rasterizer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : point_computation
      PORT MAP (
         angle   => angle,
         c0      => c0,
         v_count => v_count,
         Ax      => Ax,
         Ay      => Ay,
         Bx      => Bx,
         By      => By,
         Cx      => Cx,
         Cy      => Cy,
         Dx      => Dx,
         Dy      => Dy
      );
   U_0 : wiper_rasterizer
      PORT MAP (
         Ax         => Ax,
         Ay         => Ay,
         Bx         => Bx,
         By         => By,
         Cx         => Cx,
         Cy         => Cy,
         Dx         => Dx,
         Dy         => Dy,
         h_count    => h_count,
         v_count    => v_count,
         wiper_b    => wiper_b,
         wiper_g    => wiper_g,
         wiper_mask => wiper_mask,
         wiper_r    => wiper_r
      );

END struct;
